class Tetramino
/*
	A classe Tetramino representa as possiveis peças do jogo, que são todas tetraminós.
*/

types
-- Linha de células representativa de um tetraminó
public Line = seq of GameGrid`CellType;


-- Matriz de tipos de células representativa de um tetraminó
public TetraminoMatrix = seq of Line;

-- Sequência das possiveis rotações de um tetraminó
private RotationsList = seq of TetraminoMatrix;

values

-- Todas as diferentes representações (matrizes) de tetraminos no jogo, tendo em contas as suas rotações
private tetraminoes : seq of RotationsList = 
[
	[ -- Tetramino I
		[
			[<Blank>,	<Blank>, <Blank>,	<Blank>],
			[<Cyan>,  <Cyan>,  <Cyan>,  <Cyan>],	
			[<Blank>,	<Blank>, <Blank>,	<Blank>],
			[<Blank>,	<Blank>, <Blank>,	<Blank>]
		],
		[
			[<Blank>,	<Blank>, <Cyan>, <Blank>],
			[<Blank>,	<Blank>, <Cyan>, <Blank>],
			[<Blank>,	<Blank>, <Cyan>, <Blank>],
			[<Blank>,	<Blank>, <Cyan>, <Blank>]
		],
		[
			[<Blank>,	<Blank>, <Blank>,	<Blank>],
			[<Blank>,	<Blank>, <Blank>,	<Blank>],
			[<Cyan>,	<Cyan>,	 <Cyan>,	<Cyan> ],	
			[<Blank>,	<Blank>, <Blank>,	<Blank>]
		],
		[
			[<Blank>,	<Cyan>,	<Blank>,	<Blank>],
			[<Blank>,	<Cyan>,	<Blank>,	<Blank>],
			[<Blank>,	<Cyan>,	<Blank>,	<Blank>],
			[<Blank>,	<Cyan>,	<Blank>,	<Blank>]
		]
	],
	
	[ -- Tetramino J
		[
			[<Blue>,	 <Blank>, <Blank>],
			[<Blue>,	 <Blue>,  <Blue>],
			[<Blank>,  <Blank>, <Blank>]
		],
		[
			[<Blank>,  <Blue>, <Blue>],
			[<Blank>,  <Blue>, <Blank>],
			[<Blank>,  <Blue>, <Blank>]
		],
		[
			[<Blank>, <Blank>, <Blank>],
			[<Blue>,  <Blue>,  <Blue>],
			[<Blank>, <Blank>, <Blue>]
		],
		[
			[<Blank>, <Blue>, <Blank>],
			[<Blank>, <Blue>, <Blank>],
			[<Blue>,  <Blue>, <Blank>]
		]
	],
	
	[ -- Tetramino L
		[
			[<Blank>,	 <Blank>,  <Orange>],
			[<Orange>, <Orange>, <Orange>],
			[<Blank>,	 <Blank>,	 <Blank>]
		],
		[
			[<Blank>,	<Orange>,	<Blank>],
			[<Blank>,	<Orange>,	<Blank>],
			[<Blank>,	<Orange>,	<Orange>]
		],
		[
			[<Blank>,	 <Blank>,  <Blank>],
			[<Orange>, <Orange>, <Orange>],
			[<Orange>, <Blank>,  <Blank>]
		],
		[
			[<Orange>, <Orange>, <Blank>],
			[<Blank>,	 <Orange>, <Blank>],
			[<Blank>,	 <Orange>, <Blank>]
		]
	],
	
	[ -- Tetramino quadrado
		[
			[<Yellow>, <Yellow>],
			[<Yellow>, <Yellow>]
		]
	],
	
	[ -- Tetramino S
		[
			[<Blank>, <Green>, <Green>],
			[<Green>, <Green>, <Blank>],
			[<Blank>, <Blank>, <Blank>]
		],
		[
			[<Blank>, <Green>, <Blank>],
			[<Blank>, <Green>, <Green>],
			[<Blank>, <Blank>, <Green>]
		],
		[
			[<Blank>, <Blank>, <Blank>],
			[<Blank>, <Green>, <Green>],
			[<Green>, <Green>, <Blank>]
		],
		[
			[<Green>, <Blank>, <Blank>],
			[<Green>, <Green>, <Blank>],
			[<Blank>, <Green>, <Blank>]
		]
	],
	
	[ -- Tetramino T
		[
			[<Blank>, <Purple>, <Blank>],
			[<Purple>, <Purple>, <Purple>],
			[<Blank>, <Blank>, <Blank>]
		],
		[
			[<Blank>, <Purple>, <Blank>],
			[<Blank>, <Purple>, <Purple>],
			[<Blank>, <Purple>, <Blank>]
		],
		[
			[<Blank>, <Blank>, <Blank>],
			[<Purple>, <Purple>, <Purple>],
			[<Blank>, <Purple>, <Blank>]
		],
		[
			[<Blank>, <Purple>, <Blank>],
			[<Purple>, <Purple>, <Blank>],
			[<Blank>, <Purple>, <Blank>]
		]
	],
	
	[ -- Tetramino Z
		[
			[<Red>, <Red>, <Blank>],
			[<Blank>, <Red>, <Red>],
			[<Blank>, <Blank>, <Blank>]
		],
		[
			[<Blank>, <Blank>, <Red>],
			[<Blank>, <Red>, <Red>],
			[<Blank>, <Red>, <Blank>]
		],
		[
			[<Blank>, <Blank>, <Blank>],
			[<Red>, <Red>, <Blank>],
			[<Blank>, <Red>, <Red>]
		],
		[
			[<Blank>, <Red>, <Blank>],
			[<Red>, <Red>, <Blank>],
			[<Red>, <Blank>, <Blank>]
		]
	]
];


instance variables

-- Rotação do tetraminó
private rotation : nat1 := 1;

-- Lista de rotações do tetraminó
private rotationsList : RotationsList;

-- Coordenadas iniciais do tetraminó
public x : int := GameGrid`HEIGHT;
public y : int := GameGrid`WIDTH / 2;

--O índice da rotação não pode ser superior ao tamanho da lista de possiveis rotações
inv rotation <= len rotationsList;


operations

-- Tetraminó no estado inicial, com a rotação inicial (igual a 1)
public Tetramino : nat1 ==> Tetramino
Tetramino(number) == (
rotationsList := tetraminoes(number);

return self
)
pre number <= len tetraminoes
post RESULT.rotationsList = tetraminoes(number) and RESULT.rotation = 1;

-- Devolve a matriz representativa do tetraminó aquando da rotação à direita
public getRightRotation : () ==> TetraminoMatrix
getRightRotation() == (
	let newRotation = ((rotation + 1) mod len rotationsList) in (
		return rotationsList(newRotation)
	)
)
post (rotation < len rotationsList and RESULT = rotationsList(rotation+1))
		 or (rotation = len rotationsList and RESULT = rotationsList(1));

-- Rotação à direita
public rotateRight : () ==> ()
rotateRight() == rotation := (rotation + 1) mod len rotationsList
post (rotation = rotation~ + 1) or (rotation~ = len tetraminoes and rotation = 0);

-- Devolve a matriz representativa do tetraminó aquando da rotação à esquerda
public getLeftRotation : () ==> TetraminoMatrix
getLeftRotation() == (
	if rotation = 1 then return rotationsList(len rotationsList)
	else return rotationsList(rotation - 1)
)
post (rotation > 1 and RESULT = rotationsList(rotation-1))
		 or (rotation = 1 and RESULT = rotationsList(len rotationsList));

-- Rotação à esquerda
public rotateLeft : () ==> ()
rotateLeft() == (
	if rotation = 1 then rotation := len rotationsList
	else rotation := rotation - 1
)
post (rotation = rotation~ - 1) or (rotation~ = 1 and rotation = len rotationsList);

-- Retorna a matriz do tetraminó
public getCurrentMatrix : () ==> TetraminoMatrix
getCurrentMatrix() == return rotationsList(rotation)
post RESULT = rotationsList(rotation);

functions

-- Devolve o número de tetraminós
public getNumber : () -> nat
getNumber() == len tetraminoes;

end Tetramino