class UnitTests is subclass of TestCase

instance variables
private tetris : Tetris := new Tetris();


operations
public testNoCollision: () ==> ()
testNoCollision() == (
	tetris.begin();
	assertFalse(tetris.tetraminoHasCollisionInCoords(5,5))
);

public testNoCollision2: () ==> ()
testNoCollision2() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(1); -- Tetraminó I
	tetris.tetramino.rotation := 2;
	assertFalse(tetris.tetraminoHasCollisionInCoords(8,15));
);

public testWallCollision: () ==> ()
testWallCollision() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(1); -- Tetraminó I
	assertTrue(tetris.tetraminoHasCollisionInCoords(8,15));
	tetris.tetramino.rotation := 2;
	assertFalse(tetris.tetraminoHasCollisionInCoords(8,15));
);

public testRightWallKick: () ==> ()
testRightWallKick() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(1); -- Tetraminó I
	assertTrue(tetris.tetramino.x = 4);
	tetris.moveRight(); tetris.moveRight(); tetris.moveRight();
	assertTrue(tetris.tetramino.x = 7);
	tetris.moveRight();
	assertTrue(tetris.tetramino.x = 7);
	tetris.rotateRight();
	assertTrue(tetris.tetramino.rotation = 2);
	assertTrue(tetris.tetramino.x = 7);
	tetris.moveRight(); tetris.moveRight();
	assertTrue(tetris.tetramino.x = 8);
	tetris.rotateRight();
	assertTrue(tetris.tetramino.rotation = 3);
	assertTrue(tetris.tetramino.x = 7);
);

public testLeftWallKick: () ==> ()
testLeftWallKick() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(1); -- Tetraminó I
	assertTrue(tetris.tetramino.x = 4);
	tetris.moveLeft(); tetris.moveLeft(); tetris.moveLeft();
	assertTrue(tetris.tetramino.x = 1);
	tetris.moveLeft();
	assertTrue(tetris.tetramino.x = 1);
	tetris.rotateRight();
	assertTrue(tetris.tetramino.rotation = 2);
	assertTrue(tetris.tetramino.x = 1);
	tetris.moveLeft(); tetris.moveLeft(); tetris.moveLeft();
	assertTrue(tetris.tetramino.x = -1);
	tetris.rotateRight();
	assertTrue(tetris.tetramino.rotation = 2);
	tetris.moveRight();
	assertTrue(tetris.tetramino.x = 0);
	tetris.rotateRight();
	assertTrue(tetris.tetramino.rotation = 3);
	assertTrue(tetris.tetramino.x = 1);
);

public testAddTetramino: () ==> ()
testAddTetramino() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(1);
	assertTrue(tetris.tetramino.y = 22);
	tetris.tick();
	assertTrue(tetris.tetramino.y = 21);
	for i = 1 to 19 do if (i > 0) then tetris.tick();
	assertTrue(tetris.tetramino.y = 2);
	tetris.tick(); -- Tetraminó é adicionado à grelha
	assertTrue(tetris.gameGrid.grid(1)(5) = <Cyan>);
	assertTrue(tetris.tetramino.y = 22); -- Novo tetraminó
);

public testAdd2Tetraminos: () ==> ()
testAdd2Tetraminos() == (
	testAddTetramino();
	tetris.tetramino := new Tetramino(1);
	assertTrue(tetris.tetramino.y = 22);
	for i = 1 to 19 do if (i > 0) then tetris.tick();
	assertTrue(tetris.tetramino.y = 3);
	tetris.tick();
	assertTrue(tetris.gameGrid.grid(2)(5) = <Cyan>);
	assertTrue(tetris.tetramino.y = 22); -- Novo tetraminó
);

public testHardDrop: () ==> ()
testHardDrop() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(2); -- Tetramino J
	assertTrue(tetris.tetramino.y = 22);
	tetris.hardDrop();
	assertTrue(tetris.gameGrid.grid(1)(5) = <Blue>);
	assertTrue(tetris.tetramino.y = 22); -- Novo tetraminó
);

public testCompletedLine: () ==> ()
testCompletedLine() == (
	tetris.begin();
	tetris.tetramino := new Tetramino(1);
	tetris.moveLeft(); tetris.moveLeft(); tetris.moveLeft(); 
	tetris.hardDrop();
	tetris.tetramino := new Tetramino(1);
	tetris.moveRight();
	tetris.hardDrop();
	assertTrue(tetris.gameGrid.grid(1)(1) = <Cyan>);
	assertTrue(tetris.gameGrid.grid(1)(8) = <Cyan>);
	tetris.tetramino := new Tetramino(4); -- Square
	tetris.moveRight(); tetris.moveRight();
	tetris.moveRight(); tetris.moveRight();
	tetris.hardDrop();
	for i = 1 to GameGrid`HEIGHT do (
		assertTrue(tetris.gameGrid.grid(i)(1) = <Blank>);
		assertTrue(tetris.gameGrid.grid(i)(8) = <Blank>);
	);
	assertTrue(tetris.gameGrid.grid(1)(10) = <Yellow>);
	assertTrue(tetris.gameGrid.grid(2)(10) = <Blank>);
	assertTrue(tetris.level = 0);
	assertTrue(tetris.score = 40);
);

end UnitTests