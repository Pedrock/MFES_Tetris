class GameGrid
/*
 A classe GameGrid representa a grelha do jogo, que é representada a partir de uma matriz
 de diferentes tipos possiveis de células.
*/

types

-- Possiveis tipos de células
public CellType = <Blank> | <Cyan> | <Yellow> | <Purple> | <Green> | <Red> | <Blue> | <Orange>;

-- Grelha do jogo, que é constituida por uma matriz de células
public Grid = seq of seq of CellType;


values

/*
		A grelha do jogo tem largura de 10 células e altura de 22, das quais apenas as 20 de baixo são visíveis.
		http://tetris.wikia.com/wiki/Tetris_Guideline#Indispensable_Rules
*/
-- Altura da grelha
public HEIGHT : nat1 = 22;

-- Altura da parte visível da grelha
public VISIBLE_HEIGHT : nat1 = 20;

-- Largura da grelha
public WIDTH : nat1 = 10;


instance variables

-- Grelha inicial encontra-se vazia
public grid : Grid := buildEmptyGrid(WIDTH, HEIGHT);

operations

-- Retorna a célula que se encontra na posição x,y
public getCell : nat1*nat1 ==> CellType
getCell(x, y) == return grid(y)(x)
pre x <= WIDTH and y <= HEIGHT
post RESULT = grid(y)(x);

-- Adiciona um tetramino à matriz das peças fixas
public addTetramino : Tetramino ==> ()
addTetramino(tetramino) == (
	for all tetraminoY in set inds tetramino.getCurrentMatrix() do (
		let line = tetramino.getCurrentMatrix()(tetraminoY) in (
			for all tetraminoX in set inds line do (
				let cellX = tetramino.x - 1 + tetraminoX, cellY = tetramino.y + 1 - tetraminoY in (
				if (line(tetraminoX) <> <Blank>) then
						grid(cellY)(cellX) := line(tetraminoX)
				)
			)
		)
	)
)
post let tetraminoMatrix = tetramino.rotationsList(tetramino.rotation) in (
	forall y in set inds grid & (
		let line = grid(y) in (
			forall x in set inds line
				& (
					let tX = x - tetramino.x + 1, tY = tetramino.y - y + 1 in (
						if (tY in set inds tetraminoMatrix and tX in set inds tetraminoMatrix(tY)) then (
							(tetraminoMatrix(tY)(tX) = <Blank> and grid~(y)(x) = grid(y)(x))
							or 
							(tetraminoMatrix(tY)(tX) <> <Blank> and grid(y)(x) = tetraminoMatrix(tY)(tX))
						)
						else
								grid~(y)(x) = grid(y)(x)
				)
			)
		)
	)
);

-- Remove linha da matriz, e adiciona nova no topo
public removeLine : nat1 ==> ()
removeLine(y) == (
	for i = y to HEIGHT - 1 do (
		grid(i) := grid(i + 1);
	);
	grid(HEIGHT) := buildEmptyRow(WIDTH);
)
pre y in set inds grid
post len grid = HEIGHT;

functions

-- Criação de uma linha da grelha vazia
private buildEmptyRow : nat -> seq of CellType
	buildEmptyRow(length) == 
		[<Blank> | v in set {1,...,length}];

-- Criação de uma grelha vazia
private buildEmptyGrid : nat1*nat1 -> Grid
	buildEmptyGrid(width, height) == 
		[buildEmptyRow(width) | v in set {1,...,height}];


end GameGrid