class Tetris
/*
	A classe Tetris representa o o modelo principal do jogo, onde se encontram definidas as operações
	 permitidas ao jogador.
*/

types

-- Vários estados do jogo
public GameState = <NotStarted> | <Game> | <GameOver>;

public Point:: x : int
							 y : int;

values

-- Número de linhas a remover para passar para o nível seguinte
public LINES_PER_LEVEL : nat1 = 20;

/* 
		Pontuação por número de linhas apagadas de uma vez.
		Este valor deve ser multiplicado por (nível + 1).
		Fonte: http://tetris.wikia.com/wiki/Scoring
*/
private mapNumLinesToScorePerLevel : map nat1 to nat = {
	1 |-> 40, 
	2 |-> 100, 
	3 |-> 300, 
	4 |-> 1200
};

instance variables

-- Grelha do jogo
public gameGrid : GameGrid := new GameGrid();

-- Tetraminó em jogo
public tetramino : [Tetramino] := nil;

-- Próximo tetraminó
public nextTetramino : [Tetramino] := nil;

-- Lista de próximos tetraminós
private tetraminoesBag : seq of nat1 := [];

-- Pontuação atual
public score : nat := 0;

-- Nível atual
public level : nat := 0;

-- Número de linhas já apagadas
public numberOfLines : nat := 0;

-- Estado do jogo atual
public gameState : GameState := <NotStarted>;

-- Invariante para garantir que um tetraminó não sobrepõe a matriz de jogo
inv tetramino = nil or not hasCollision(tetramino.rotationsList(tetramino.rotation), gameGrid.grid, tetramino.x, tetramino.y);

operations

--Início do jogo
public begin : () ==> ()
begin() == (
	gameGrid := new GameGrid();
	tetramino := popTetraminoFromBag();
	nextTetramino := popTetraminoFromBag();
	score := 0;
	level := 0;
	numberOfLines := 0;
	gameState := <Game>;
);

-- Função a ser chamada a cada tick do jogo, de forma a atualizar o mesmo
public tick : () ==> ()
tick() == (
	if (gameState <> <Game>) then return;
	if not tetraminoHasCollisionInCoords(tetramino.x, tetramino.y - 1) then
		tetramino.y := tetramino.y - 1
	else
		addTetraminoToGrid();
);

-- Função para obter o delay entre ticks.
public getTickDelay : () ==> int
getTickDelay() == (
	if (level <= 8) then return floor (-83.5*level + 800.67)
	elseif (level <= 29) then return floor (-3.5325*level + 115.69)
	else return 13;
);

-- Função chamada pela GUI para mover a peça atual para a direita
public moveRight : () ==> ()
moveRight() == (
	if (gameState <> <Game>) then return;
	if not tetraminoHasCollisionInCoords(tetramino.x + 1, tetramino.y) then
		tetramino.x := tetramino.x + 1;
);

-- Função chamada pela GUI para mover a peça atual para a esquerda
public moveLeft : () ==> ()
moveLeft() == (
	if (gameState <> <Game>) then return;
	if not tetraminoHasCollisionInCoords(tetramino.x - 1, tetramino.y) then
		tetramino.x := tetramino.x - 1;
);

-- Função chamada pela GUI para rodar a peça atual para a direita
public rotateRight : () ==> ()
rotateRight() == (
	if (gameState <> <Game>) then return;
	tryRotation(tetramino.getRightRotation())
);

-- Função chamada pela GUI para rodar a peça atual para a esquerda
public rotateLeft : () ==> ()
rotateLeft() == (
	if (gameState <> <Game>) then return;
	tryRotation(tetramino.getLeftRotation())
);

-- Função chamada pela GUI para fazer um hard drop
public hardDrop : () ==> ()
hardDrop() == (
	if (gameState <> <Game>) then return;
	while canMoveDown() do (
		tetramino.y := tetramino.y - 1;
	);
	addTetraminoToGrid()
);

-- Devolve a altura a que deve ficar a ghost piece
-- http://tetris.wikia.com/wiki/Ghost_piece
public getGhostPieceHeight : () ==> [int]
getGhostPieceHeight() == (
	if gameState <> <Game> then return nil
	else (
		dcl y : int := tetramino.y;
		dcl matrix : Tetramino`TetraminoMatrix := tetramino.getCurrentMatrix();
		while not hasCollision(matrix, gameGrid.grid, tetramino.x, y - 1) do
			y := y - 1;
		return y;
	)
);

-- Função utilizada para verificar se uma peça pode ser movida uma casa para baixo
private canMoveDown : () ==> bool
canMoveDown() == (
	return not tetraminoHasCollisionInCoords(tetramino.x, tetramino.y - 1)
);

-- Função para adicionar o tetramino atual à matriz de peças fixas
private addTetraminoToGrid : () ==> ()
addTetraminoToGrid() == (
	gameGrid.addTetramino(tetramino);
	removeCompleteLines();
	let line = gameGrid.grid(GameGrid`VISIBLE_HEIGHT) in (
		if exists x in set inds line & line(x) <> <Blank> then (
			gameState := <GameOver>;
			tetramino := nil;
		)
	);
	if gameState = <Game> then (
		tetramino := nextTetramino;
		nextTetramino := popTetraminoFromBag();
	);
);

-- Função utilizada para remover linhas completas e atulizar pontuação
private removeCompleteLines : () ==> ()
removeCompleteLines() == (
	dcl linesRemoved : nat := 0;
	dcl y : nat := 1;
	while (y <= len gameGrid.grid) do (
		let line = gameGrid.grid(y) in (
			if (forall x in set inds line & line(x) <> <Blank>) then (
				gameGrid.removeLine(y);
				linesRemoved := linesRemoved + 1;
				y := y - 1;
			)
		);
		y := y + 1;
	);
	if (linesRemoved > 0) then (
		atomic(
			score := score + calcScore(linesRemoved, level);
			numberOfLines := numberOfLines + linesRemoved;
			level := floor (numberOfLines / LINES_PER_LEVEL)
		);
	)
);

-- Vê se é possível fazer uma rotação. Se for possível, executa a mesma.
-- Se não for possível tenta a mesma movendo a peça uma casa para a direita ou em último caso, para a esquerda.
-- Processo descrito em: http://tetris.wikia.com/wiki/Wall_kick
private tryRotation : Tetramino`RotationResult ==> ()
tryRotation(result) ==  (
	if not hasCollision(result.matrix, gameGrid.grid, tetramino.x, tetramino.y) then
			tetramino.rotation := result.rotation
		else if not hasCollision(result.matrix, gameGrid.grid, tetramino.x + 1, tetramino.y) then
		atomic ( -- Right wall kick
			tetramino.rotation := result.rotation;
			tetramino.x := tetramino.x + 1
		)
		else if not hasCollision(result.matrix, gameGrid.grid, tetramino.x - 1, tetramino.y) then
		atomic ( -- Left wall kick
			tetramino.rotation := result.rotation;
			tetramino.x := tetramino.x - 1
		)
);

-- Verifica se o tetraminó em jogo tem colisão nas coordenadas (x, y)
public tetraminoHasCollisionInCoords : int*int ==> bool
tetraminoHasCollisionInCoords(x, y) == (
	for all tetraminoY in set inds tetramino.getCurrentMatrix() do (
		let line = tetramino.getCurrentMatrix()(tetraminoY) in (
			for all tetraminoX in set inds line do (
				let cellX = x - 1 + tetraminoX, cellY = y + 1 - tetraminoY in (
				if (line(tetraminoX) <> <Blank>) then (
					if cellX < 1 or cellX > GameGrid`WIDTH
						  or cellY < 1 or cellY > GameGrid`HEIGHT
							or gameGrid.getCell(cellX, cellY) <> <Blank>
						then return true
					)
				)
			)
		)
	);
	return false
)
post 
RESULT = hasCollision(tetramino.rotationsList(tetramino.rotation), gameGrid.grid, x, y);

-- Cria e baralha uma lista de identificadores de tetraminós.
-- http://tetris.wikia.com/wiki/Random_Generator
private generateTetraminosBag : () ==> seq of nat1
generateTetraminosBag() == (
	dcl bag : seq of nat1 := [x | x in set {1, ..., Tetramino`getNumber()}];
	for i = 1 to Tetramino`getNumber() - 1 do (
		dcl j : nat1 := MATH`rand(Tetramino`getNumber()-1)+1;
		dcl tmp : nat1 := bag(i);
  	bag(i) := bag(j);
  	bag(j) := tmp;
	);
	return bag;
);

-- Obtém um novo tetraminó da lista
private popTetraminoFromBag: () ==> Tetramino
popTetraminoFromBag() == (
	if len tetraminoesBag = 0 then 
		tetraminoesBag := generateTetraminosBag();
	let t : Tetramino = new Tetramino(hd tetraminoesBag) in (
		tetraminoesBag := tl tetraminoesBag;
		return t;
	);
);

functions

-- Teste de colisões de matriz de tetraminó com cubos existentes na matriz de jogo, para determinada posição (x, y) do tetraminó
private hasCollision : Tetramino`TetraminoMatrix * GameGrid`Grid * int * int -> bool
hasCollision(tetraminoMatrix, gameGrid, x, y) == (
	exists tetraminoY in set inds tetraminoMatrix &
		exists tetraminoX in set inds tetraminoMatrix(tetraminoY)
			& tetraminoMatrix(tetraminoY)(tetraminoX) <> <Blank> 
			and let cellX = x - 1 + tetraminoX, cellY = y + 1 - tetraminoY in (
						cellX < 1
						or cellX > GameGrid`WIDTH
						or cellY < 1
						or cellY > GameGrid`HEIGHT
						or gameGrid(cellY)(cellX) <> <Blank>
			)
);

-- Cálculo da pontuação para um determinado número de linhas completas de uma vez, tendo em conta o nivel atual
private calcScore : nat1*nat -> nat
calcScore(lines, level) == (
	mapNumLinesToScorePerLevel(lines)*(level+1)
)
pre lines in set dom mapNumLinesToScorePerLevel;

end Tetris